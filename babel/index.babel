  /* For use with NodeJS
  import React from 'react';
  import { render } from 'react-dom';
  import { List, Map } from 'immutable';
  import { createStore } from 'redux';
  import { Provider, connect } from 'react-redux';
  */

  // Use in browser/codepen
  const { PropTypes } = React;
  const { render } = ReactDOM;
  const { List, Map } = Immutable;
  const { createStore } = Redux;
  const { Provider, connect } = ReactRedux;

  // Dummy recipes
  // Cannot use 0 or it will not allow editing
  const dummyrecipes = [
    {
      id: 1,
      title: 'Biscuits',
      ingredients: List([
        '2 cu. Flour',
        '1 cups. Butterilk',
        '2 tsp. Salt',
        '1/2 stick. Butter'
      ]),
      pictureUrl: 'http://dining.savannahnow.com/sites/dining.savannahnow.com/files/styles/flexslider_enhanced/public/field/photos/14729925.jpg'
    },
    {
      id: 2,
      title: 'Spicey, Cheesey Omelette',
      ingredients: List([
        '2 Eggs',
        '1/2 cu. Milk',
        '1 tsp. Salt',
        '3 oz. Cheese',
        '2 oz. Pepperjack Cheese'
      ]),
      pictureUrl: 'http://media2.intoday.in/indiatoday/images/stories/story-2om-ladya2172_647_051316100759.jpg'
    },
    {
      id: 3,
      title: 'Yummy Salad!',
      ingredients: List([
        '2 cups. Spinach',
        '1/2 cu. Kale',
        '3 Boiled Eggs',
        '1/2 tsp. Salt'
      ]),
      pictureUrl: 'http://i447.photobucket.com/albums/qq193/abbyhopson/salad2jpg_zps48633e2a.jpg'
    }
  ];

  // Actions
  const actions = {
    ADD_RECIPE: 'ADD_RECIPE',
    EDIT_RECIPE: 'EDIT_RECIPE',
    DELETE_RECIPE: 'DELETE_RECIPE',
    TOGGLE_EDIT: 'TOGGLE_EDIT',
    TOGGLE_RECIPE: 'TOGGLE_RECIPE',
    ADD_IS_VISIBLE: 'ADD_IS_VISIBLE',
    TOGGLE_ABOUT: 'TOGGLE_ABOUT',
    CLEAR_STATE: 'CLEAR_STATE',
    CHANGE_ABOUT_PAGE: 'CHANGE_ABOUT_PAGE'
  };

  const getRandom = () => {
    return Math.floor(
      (Math.random() * (Math.random() * 3.1457)) * 100000000
    );
  };

  const properCapitalizeString = (aString) => {
    return aString.split(' ').map((word) => {
      return word.substr(0, 1).toUpperCase() + word.substr(1);
    }).join(' ');
  };

  const checkPicture = (url) => {
    if (url) {
      return url;
    } else {
      return 'https://www.polyvore.com/cgi/img-thing?.out=jpg&size=l&tid=124485997';
    }
  };

  const addValueToKey = (object, key, value) => {
    let temp = {};
    temp[key] = value;
    return Object.assign({}, object, temp);
  };

  const getLocalStore = (local) => {
    return JSON.parse(local.getItem('_43259x90q-recipeState'));
  };

  const storeLocalAndReturn = (state) => {
    window.localStorage.setItem('_432459x90q-recipeState', JSON.stringify(state.toObject()));
    return state;
  };

  function addRecipe(title, ingredients, pictureUrl) {
    return {
      type: actions.ADD_RECIPE,
      id: getRandom(),
      title: properCapitalizeString(title),
      // Splits where any commas or semicolons are placed (even if space after)
      ingredients: List(ingredients.split(/\s?[,|;]+\s?/gi).map(properCapitalizeString)),
      pictureUrl: checkPicture(pictureUrl)
    };
  }

  function editRecipe(id, title, ingredients, pictureUrl) {
    return {
      type: actions.EDIT_RECIPE,
      id,
      title,
      ingredients: List(ingredients.split(/\s?[,|;]+\s?/gi)),
      pictureUrl: checkPicture(pictureUrl)
    };
  }

  function deleteRecipe(id) {
    return {
      type: actions.DELETE_RECIPE,
      id
    };
  }

  function toggleEdit(id) {
    return {
      type: actions.TOGGLE_EDIT,
      id
    };
  }

  function toggleRecipe(id) {
    return {
      type: actions.TOGGLE_RECIPE,
      id: id
    };
  }

  function toggleAddEditPopup(bool) {
    return {
      type: actions.ADD_IS_VISIBLE,
      bool
    };
  }

  function toggleAbout() {
    return {
      type: actions.TOGGLE_ABOUT
    };
  }

  function clearState() {
    return {
      type: actions.CLEAR_STATE
    };
  }

  function changeAboutPage(pageNumber) {
    return {
      type: actions.CHANGE_ABOUT_PAGE,
      pageNumber
    };
  }

  // Reducers
  let initialState ;

  const defaultState = Map({
    recipes: List(dummyrecipes),
    toggles: {
      addEditIsHidden: true,
      currentlyEditing: null,
      aboutVisible: false
    },
    viewingRecipeId: 0,
    currentAboutPage: 0
  });

  if (getLocalStore(window.localStorage)) {
    initialState = getLocalStore(window.localStorage);
    // Turn objects/arrays back into immutables
    initialState.recipes = List(initialState.recipes.map(recipe => {
      recipe.ingredients = List(recipe.ingredients);
      return recipe;
    }));
    initialState = Map(initialState);
  } else {
    initialState = defaultState;
  }

  function recipeApp(state = initialState, action) {
    let property = '';
    switch (action.type) {
    case actions.ADD_RECIPE:
      property = 'recipes';
      return storeLocalAndReturn(state.set(property, state.get(property).push({
        id: action.id,
        title: action.title,
        ingredients: action.ingredients,
        pictureUrl: action.pictureUrl
      })));

    case actions.TOGGLE_EDIT:
      property = 'toggles';
      return storeLocalAndReturn(state.set(property, addValueToKey(
        state.get(property), 'currentlyEditing', action.id
      )));

    case actions.EDIT_RECIPE:
      property = 'recipes';
      return storeLocalAndReturn(state.set(property, state.get(property).map(recipe => {
        if (recipe.id === action.id) {
          recipe.title = action.title;
          recipe.ingredients = action.ingredients;
          recipe.pictureUrl = action.pictureUrl;
        }

        return recipe;
      })));

    case actions.DELETE_RECIPE:
      property = 'recipes';
      return storeLocalAndReturn(state.set(property, state.get(property).filter(recipe => {
        return recipe.id !== action.id;
      })));

    case actions.ADD_IS_VISIBLE:
      property = 'toggles';
      return storeLocalAndReturn(state.set(property, addValueToKey(
        state.get(property), 'addEditIsHidden', action.bool
      )));

    case actions.TOGGLE_RECIPE:
      property = 'toggles';
      return storeLocalAndReturn(state.set(property, addValueToKey(
        state.get(property), 'viewingRecipeId', state.get('recipes').toJS().filter(item => {
          if (item.id === action.id) {
            return true;
          } else {
            return false;
          }
        })[0]
      )));

    case actions.TOGGLE_ABOUT:
      property = 'toggles';
      return storeLocalAndReturn(state.set(property, addValueToKey(
        state.get(property), 'aboutVisible', !state.get(property)['aboutVisible']
      )));

    case actions.CLEAR_STATE:
      return storeLocalAndReturn(defaultState);

    case actions.CHANGE_ABOUT_PAGE:
      return storeLocalAndReturn(state.set('currentAboutPage', action.pageNumber));

    default:
      return state;
    }
  }

  let store = createStore(recipeApp);

  // Presentation components
  // Background for popups
  let Background = ({ toggle }) => {
    return (
      <div className="background" onClick={toggle} />
    );
  };

  Background.propTypes = {
    toggle: PropTypes.func.isRequired
  };

  let RecipePopUp = ({ recipe, onEditClick, onDeleteClick, toggle }) => {
    let ingredientsHtml;
    let isHidden = 'popup-container';
    let id;
    let title;
    let ingredients;

    // Returns empty div if the element is not needed.
    if (!recipe) {
      ingredientsHtml = (
        <tr key="0" className="ingredient">
          <td className="quantity">--</td>
          <td className="measurement">--</td>
          <td className="ingredient-name">------</td>
        </tr>
      );
      isHidden += ' hidden';
      id = 0;
      title = '';
    } else {
      id = recipe.id;
      title = recipe.title;
      ingredients = recipe.ingredients;

      let keyNum = 0;
      ingredientsHtml = ingredients.map(ingredient => {
        // First item is quantity, second is measurement
        let amount = ingredient.match(/(([0-9]+(\s[0-9]+)?\/?[0-9]{0,2})\s?([a-z]+\.)?)/gi);
        let ingredientName;

        if (amount) {
          // Declared first before amount changes into array
          ingredientName = ingredient.split(amount).join('').trim();
          amount = amount[0].split(/\s(?=[a-z])/gi);
        } else {
          amount = ['--', '--'];
          ingredientName = ingredient;
        }

        return (
          <tr key={keyNum++} className="ingredient">
            <td className="quantity">{amount[0]}</td>
            <td className="measurement">{amount[1]}</td>
            <td className="ingredient-name">{ingredientName}</td>
          </tr>
        );
      });
    }

    return (
      <div className={isHidden}>
        <Background toggle={toggle} />
        <div className="expanded recipe-box popup">
          <div className="title">
            <a href="#main" onClick={toggle}>{title}</a>
          </div>
          <div className="ingredient-list popup-body-container">
            <table className="ingredients">
              <thead>
                <tr>
                  <th className="quantity">Qty</th>
                  <th className="measurement">Units</th>
                  <th className="ingredient-name">Ingredient</th>
                </tr>
              </thead>
              <tbody>
                {ingredientsHtml}
              </tbody>
            </table>
          </div>
          <div className="ingredients-alter-buttons">
            <button className="btn btn-default" onClick={() => onEditClick(id)}>Edit</button>
            <button className="btn btn-danger" onClick={() => onDeleteClick(id)}>Delete</button>
          </div>
        </div>
      </div>
    );
  };

  RecipePopUp.propTypes = {
    recipe: PropTypes.object,
    onEditClick: PropTypes.func.isRequired,
    onDeleteClick: PropTypes.func.isRequired,
    toggle: PropTypes.func.isRequired
  };

  const mapStateToRecipePopUpProps = (state) => {
    return {
      'recipe': state.get('toggles')['viewingRecipeId']
    };
  };

  const mapDispatchToRecipePopUpProps = (dispatch) => {
    return {
      onEditClick: (id) => {
        dispatch(toggleEdit(id));
        dispatch(toggleAddEditPopup(false));
        dispatch(toggleRecipe(null));
      },
      onDeleteClick: (id) => {
        dispatch(deleteRecipe(id));
        dispatch(toggleRecipe(null));
      },
      toggle: () => {
        dispatch(toggleRecipe(null));
      }
    };
  };

  RecipePopUp = connect(
    mapStateToRecipePopUpProps,
    mapDispatchToRecipePopUpProps
  )(RecipePopUp);

  // Recipe item
  let Recipe = ({ onClick, title, ingredients, pictureUrl, expanded }) => {
    return (
      <div onClick={onClick} className="collapsed recipe-box">
        <img src={pictureUrl} alt={'picOf-' + title.replace(/\s/gi, '+')} className="recipe-picture" />
        <div className="title-box">
          <a href={'#' + title.replace(/\W(?=\w)+/gi, '_').replace(/\W+/gi, '')}>
            <p className="collapsed-title">{title}</p>
          </a>
        </div>
      </div>
    );
  };

  Recipe.propTypes = {
    onClick: PropTypes.func.isRequired,
    title: PropTypes.string.isRequired,
    ingredients: PropTypes.object.isRequired,
    pictureUrl: PropTypes.string,
    expanded: PropTypes.bool.isRequired
  };

  // Recipe List
  const RecipeList = ({ recipes, onRecipeClick }) => {
    const recipeListHtml = recipes.map(recipe => {
      return (
        <Recipe
          key={recipe.id}
          {...recipe}
          onClick={() => onRecipeClick(recipe.id)}
        />
      );
    });

    return (
      <div className="recipelist-wrapper">
        {recipeListHtml}
      </div>
    );
  };

  RecipeList.propTypes = {
    recipes: PropTypes.object.isRequired,
    onRecipeClick: PropTypes.func.isRequired
  };

  // Container Components
  // Mapping state and dispatch to props
  const mapStateToProps = (state) => {
    return {
      recipes: state.get('recipes')
    };
  };

  const mapDispatchToProps = (dispatch) => {
    return {
      onRecipeClick: (id) => {
        dispatch(toggleRecipe(id));
      }
    };
  };

  const RenderRecipeList = connect(
    mapStateToProps,
    mapDispatchToProps
  )(RecipeList);

  const FormTemplate = ({ recipes, editId, toggle, submitRecipe }) => {
    let formName;
    let title;
    let ingredients;
    let pictureUrl;
    let titleHolder;
    let ingredientsHolder;
    let urlHolder;

    if (editId) {
      formName = 'Edit';

      // Find correct recipe object to edit
      const recipe = recipes.toArray().filter(item => {
        return item.id === editId;
      })[0];
      // Fill in input with current values
      titleHolder = {defaultValue: recipe.title};
      ingredientsHolder = {defaultValue: recipe.ingredients.join(', ')};
      urlHolder = {defaultValue: recipe.pictureUrl};
    } else {
      formName = 'Add';

      // Give placeholders for example of what to put
      titleHolder = {placeholder: 'Scrambled Eggs'};
      ingredientsHolder = {placeholder: '2 Eggs, 1 cu. Milk, 1/2 stick. Butter, 1 tsp. Salt'};
      urlHolder = {placeholder: checkPicture()};
    }

    return (
      <form onSubmit={e => {
        e.preventDefault();
        // If blank in either field then do not submit
        if (!title.value.trim() || !ingredients.value.trim()) {
          return;
        }

        if (!pictureUrl.value.trim()) {
          pictureUrl.value = '';
        }
        // Either add or edit recipe; editId is last since it is not need for addRecipe()
        submitRecipe(title.value, ingredients.value, pictureUrl.value, editId);
        // Return null for editId and/or hide form PopUp
        toggle(editId);
        // Reset fields
        title.value = '';
        ingredients.value = '';
        pictureUrl.value = '';
      }}>
        <table className="input-table">
          <tbody>
            <tr>
              <td className="input-title">
                <p className="input-p inputTitle">Recipe Title:</p>
              </td>
              <td>
                <input {...titleHolder} type="text" ref={node => {
                  title = node;
                }} />
              </td>
            </tr>
            <tr>
              <td className="input-title">
                <p className="input-p inputIngredients">Recipe Ingredients:</p>
              </td>
              <td>
                <input {...ingredientsHolder} type="text" ref={node => {
                  ingredients = node;
                }} />
              </td>
            </tr>
            <tr>
              <td className="input-title">
                <p className="input-p">Recipe Picture URL:</p>
              </td>
              <td>
                <input {...urlHolder} type="url" ref={node => {
                  pictureUrl = node;
                }} />
              </td>
            </tr>
          </tbody>
        </table>

        <div className="ingredients-alter-buttons">
          <button className="btn btn-primary" type="submit">
            {formName}
          </button>
          <button className="btn btn-default" type="button" onClick={() => toggle(editId)}>
            Cancel
          </button>
        </div>
      </form>
    );
  };

  FormTemplate.propTypes = {
    recipes: PropTypes.array,
    editId: PropTypes.number,
    toggle: PropTypes.func.isRequired,
    submitRecipe: PropTypes.func
  };

  const mapStateToPropsEditForm = (state) => {
    return {
      recipes: state.get('recipes'),
      editId: state.get('toggles')['currentlyEditing']
    };
  };

  const mapDispatchToPropsEditForm = (dispatch) => {
    return {
      toggle: (id) => {
        dispatch(toggleEdit(null));
        dispatch(toggleAddEditPopup(true));
        // Re-renders recipe
        dispatch(toggleRecipe(id));
      },
      submitRecipe: (title, ingredients, pictureUrl, id) => {
        dispatch(editRecipe(id, title, ingredients, pictureUrl));
      }
    };
  };

  const EditForm = connect(
    mapStateToPropsEditForm,
    mapDispatchToPropsEditForm
  )(FormTemplate);

  const mapDispatchToPropsAddForm = (dispatch) => {
    return {
      toggle: () => {
        dispatch(toggleAddEditPopup(true));
      },
      submitRecipe: (title, ingredients, pictureUrl) => {
        dispatch(addRecipe(title, ingredients, pictureUrl));
      }
    };
  };

  const AddForm = connect(
    undefined,
    mapDispatchToPropsAddForm
  )(FormTemplate);

  let FormPopup = ({ addEditIsHidden, currentlyEditing, toggle }) => {
    let Form;
    let title;
    let isHidden = 'popup-container';

    if (addEditIsHidden) {
      isHidden += ' hidden';
    }

    if (currentlyEditing) {
      title = 'Edit Recipe';
      Form = <EditForm />;
    } else {
      title = 'Add Recipe';
      Form = <AddForm />;
    }

    return (
      <div className={isHidden}>
        <Background toggle={toggle} />
        <div className="popup">
          <div className="title">{title}</div>
          <div className="popup-body-container">
            {Form}
          </div>
        </div>
      </div>
    );
  };

  FormPopup.propTypes = {
    addEditIsHidden: PropTypes.bool.isRequired,
    currentlyEditing: PropTypes.any,
    toggle: PropTypes.func.isRequired
  };

  const mapStateToPropsFormPopUp = (state) => {
    return {
      addEditIsHidden: state.get('toggles')['addEditIsHidden'],
      currentlyEditing: state.get('toggles')['currentlyEditing']
    };
  };

  const mapDispatchToPropsFormPopUp = (dispatch) => {
    return {
      toggle: () => {
        dispatch(toggleAddEditPopup(true));
        // Empties out form if background clicked instead of Cancel during EditForm
        dispatch(toggleEdit(null));
      }
    };
  };

  FormPopup = connect(
    mapStateToPropsFormPopUp,
    mapDispatchToPropsFormPopUp
  )(FormPopup);

  let AboutPopup = ({ aboutVisible, currentPage, changePageTo, toggle }) => {
    let title = 'About This Page';
    let isHidden = 'popup-container';

    if (!aboutVisible) {
      isHidden += ' hidden';
    }

    const pageOne = (className = '') => {
      return (
        <div className={'page ' + className}>
          <p>This page was designed for a project for FreeCodeCamp.</p>
          <p>The requirements for the project were:</p>
          <ul>
            <li>Create recipes with names and ingredients</li>
            <li>See all recipes where all names are visible</li>
            <li>The user can click a recipe to view the ingredients</li>
            <li>Recipes can be edited and deleted</li>
            <li>Recipes are saved to local storage</li>
            <li>Use of React and SASS/SCSS</li>
          </ul>
        </div>
      );
    };

    const pageTwo = (className = '') => {
      return (
        <div className={'page ' + className}>
          <p>In addition to the above requirements, the page should have the following features:</p>
          <ul>
            <li>Use of the Redux and React-Redux libraries</li>
            <li>Use of immutable data structures with ImmutableJS</li>
            <li>Fluid animations of changing elements</li>
            <li>The ability to clear the local storage of all new recipes</li>
            <li>A fluid, functioning mobile design</li>
          </ul>
        </div>
      );
    };

    const pageThree = (className = '') => {
      return (
        <div className={'page ' + className}>
          <p>In addition to the above requirements, the page should have the following features:</p>
          <ul>
            <li>The ability to add a picture of the dish (or not)</li>
            <li>Text entered should automatically be capitalized</li>
            <li>Ingredients entered should be parsed to divide up the quantity, measurement, and ingredient</li>
          </ul>
        </div>
      );
    };

    const pageFour = (className = '') => {
      return (
        <div className={'page ' + className}>
          <p>In addition to the above requirements, the page should have the following features:</p>
          <ul>
            <li>Tiles should display in a fluid, centered, grid pattern</li>
            <li>The user should be able to read about the various features of the site and go through various pages</li>
            <li>The user should be able to exit the page and the exact state be returned to on next visit</li>
          </ul>
        </div>
      );
    };

    const pageFive = (className = '') => {
      return (
        <div className={'page ' + className}>
          <p>Future, possible addtions:</p>
          <ul>
            <li>Drag and drop recipes to change order</li>
            <li>OAuth sign-in and saving recipes to a user's account</li>
            <li>Back-end built and deployed on Heroku</li>
          </ul>
        </div>
      );
    };


    const output = [
      pageOne,
      pageTwo,
      pageThree,
      pageFour,
      pageFive
    ].map((page, i) => {
      if (currentPage === i) {
        return page();
      } else if (currentPage > i) {
        return page('no-visible move-right');
      } else if (currentPage < i) {
        return page('no-visible move-left');
      }
    });

    return (
      <div className={isHidden}>
        <Background toggle={toggle} />
        <div className="popup">
          <div className="title" onClick={toggle}>{title}</div>
          <div className="popup-body-container">
            <div className="inline arrow-container">
              <button disabled={currentPage - 1 < 0} className="arrow left-arrow" onClick={() => changePageTo(currentPage - 1)}>◀</button>
            </div>
            {output}
            <div className="inline arrow-container">
              <button disabled={currentPage + 1 >= output.length} className="arrow right-arrow" onClick={() => changePageTo(currentPage + 1)}>▶</button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  AboutPopup.propTypes = {
    aboutVisible: PropTypes.bool.isRequired,
    currentPage: PropTypes.number.isRequired,
    changePageTo: PropTypes.func.isRequired,
    toggle: PropTypes.func.isRequired
  };

  const mapStateToPropsAboutPopup = (state) => {
    return {
      aboutVisible: state.get('toggles')['aboutVisible'],
      currentPage: state.get('currentAboutPage')
    };
  };

  const mapDispatchToPropsAboutPopup = (dispatch) => {
    return {
      toggle: () => {
        dispatch(toggleAbout());
      },
      changePageTo: (pageNumber) => {
        dispatch(changeAboutPage(pageNumber));
      }
    };
  };

  AboutPopup = connect(
    mapStateToPropsAboutPopup,
    mapDispatchToPropsAboutPopup
  )(AboutPopup);

  let AddButton = ({ dispatch }) => {
    return (
      <div id="addButtonContainer">
        <button id="addButton" className="btn btn-primary" onClick={() => {
          dispatch(toggleAddEditPopup(false));
        }}>
          Add
        </button>
      </div>
    );
  };

  AddButton.propTypes = {
    dispatch: PropTypes.func.isRequired
  };

  AddButton = connect()(AddButton);

  // Navbar
  let Navbar = () => {
    return (
      <nav className="navbar">
        <div className="nav-container">
          <div className="nav-title">
            <p>Redux Recipe Box</p>
          </div>
          <div className="nav-buttons">
            <About />
            <Clear />
          </div>
        </div>
      </nav>
    );
  };

  Navbar = connect()(Navbar);

  // About button
  let About = ({ toggle }) => {
    return (
      <div type="button" id="about-button" className="nav-button no-mobile" onClick={toggle}>
        About
      </div>
    );
  };

  About.propTypes = {
    toggle: PropTypes.func.isRequired
  };

  const mapDispatchToAboutProps = (dispatch) => {
    return {
      toggle: () => {
        dispatch(toggleAbout());
      }
    };
  };

  About = connect(
    undefined,
    mapDispatchToAboutProps
  )(About);

  let Clear = ({ clearState }) => {
    return (
      <div id="clear-button" className="nav-button" onClick={clearState}>
        Clear
      </div>
    );
  };

  Clear.propTypes = {
    clearState: PropTypes.func.isRequired
  };

  const mapDispatchToClearProps = (dispatch) => {
    return {
      clearState: () => {
        const warning = 'Clicking \"OK\" will delete all stored recipes PERMANENTLY, are you sure you want to do this?';
        if (confirm(warning)) {
          dispatch(clearState());
        }
      }
    };
  };

  Clear = connect(
    undefined,
    mapDispatchToClearProps
  )(Clear);

  // Put together
  const App = () => {
    return (
      <div id="root">
        <Navbar />
        <RenderRecipeList />
        <AddButton />
        <AboutPopup />
        <FormPopup />
        <RecipePopUp />
      </div>
    );
  };

  // Render in Provider to create state everywhere
  render(
    <Provider store={store}>
      <App />
    </Provider>,
    document.getElementById('app')
  );
